[transmogrifier]
pipeline =
# Dans le catalogsource, on peut définir également une catalogquery pour récup juste un morceau de site via path.
    catalogsource
#    skip-some-types    
    insert-subject
    insert-content-categories
    insert-portal-type
    path-adjustment
    folders
    type-substitution 
    map-fields
    constructor
    datafields
#    archschemaupdater
    uidupdater
    interfacesupdater
    annotations-updater
    propertiesupdater
##workflow
    get-last-workflow-state
    calc-workflow-transition
    workflowupdater
##########
    schemaupdater
##shop/association,... transformations
    cardimporter
    news
    folderlayout
#    TTGoogleMapMarkerToCard    
##########

#    datesupdater
    local_roles
    mimetype
    owner
    logger
## Not very stable.
#    positionupdater
    reindexobject
    savepoint

[catalogsource]
blueprint = collective.jsonmigrator.catalogsource
#remote-url = http://srv-test.imio.be:8080/dison/dison
remote-url = http://srv-test.imio.be:8080
remote-username = admin
remote-password = taGadai1Ie
remote-crawl-depth=-1
catalog-path = /wanze/wanze/portal_catalog
catalog-query = {}
# catalog-query = {"path":"/dison/dison/communication/actualites/agenda-communal/agenda-2016/pcs"}

[archschemaupdater]
blueprint = plone.app.transmogrifier.atschemaupdater

[skip-some-types]
blueprint = collective.transmogrifier.sections.condition
condition = python:item['_type'] in [
                    'Plone Site',
                    'News Item',
                    'Event',
                    'Folder',
                    ]
                    
[datesupdater]
blueprint = plone.app.transmogrifier.datesupdater
path-key = _path
creation-key = creation_date
modification-key = modification_date
effective-key = effective_date
expiration-key = expiration_date

[insert-subject]
blueprint = collective.transmogrifier.sections.inserter
key = string:subject
value = python: item.get('subject', [])

[insert-content-categories]
blueprint = collective.transmogrifier.sections.inserter
key = string:content_categories
value = python: item.get('content_categories', [])

[insert-portal-type]
blueprint = collective.transmogrifier.sections.inserter
key = string:_type
value = python: item.get('_type')

[path-adjustment]
blueprint = collective.transmogrifier.sections.inserter
key = string:_path
value = python:item['_path'].replace('/wanze/wanze', '')

[map-fields]
blueprint = ftw.blueprints.fieldmapper
field-mapping = python:{}

[folders]
blueprint = collective.transmogrifier.sections.folders
folder-type=Folder

[type-substitution]
blueprint = collective.transmogrifier.sections.inserter
key = string:_type
value = python:'Folder'
condition = python: item['_type'] == 'Large Plone Folder'

[constructor]
blueprint = collective.transmogrifier.sections.constructor
type-key = _type
path-key = _path

[uidupdater]
blueprint = plone.app.transmogrifier.uidupdater

[schemaupdater]
blueprint = transmogrify.dexterity.schemaupdater

[datafields]
blueprint = collective.jsonmigrator.datafields

[cardimporter]
blueprint = imio.transmogrifier.cardimporter.cardimporter

[news]
blueprint = imio.transmogrifier.cardimporter.news

[folderlayout]
blueprint = imio.transmogrifier.cardimporter.folder

[TTGoogleMapMarkerToCard]
blueprint = imio.transmogrifier.cardimporter.TTGoogleMapMarkerToCard

[get-last-workflow-state]
blueprint = collective.transmogrifier.sections.inserter
key = string:_workflow_state
# Get time-sorted tuples out of workflow_history and choose review_state of the last one. Simples!
value = python:sorted([
                        (wf_item['time'], wf_item['review_state'], wf_name)
                            for wf_name in item['_workflow_history']
                                for wf_item in item['_workflow_history'][wf_name]
                                ])[-1][1:]
condition = python: item.has_key('_workflow_history') and item['_workflow_history']

[calc-workflow-transition]
blueprint = collective.transmogrifier.sections.inserter
key = string:_transitions
value = python:{"created": "back_to_created", 
                "published_and_hidden": "publish_and_hide", 
                "published_and_shown": "publish_and_show"}[item['_workflow_state'][0]]
condition = python: (item.has_key('_workflow_state') and 
                     item['_workflow_state'][0] in ['created','published_and_hidden','published_and_shown'] and
                     item['_type'] in ("CalendarXFolder","Document","Event","Favorite","File","Folder","FormFolder","Link","News Item","Newsletter"))

# Actually run the given transition to update the workflow state
[workflowupdater]
blueprint = plone.app.transmogrifier.workflowupdater

[local_roles]
blueprint = collective.blueprint.jsonmigrator.ac_local_roles
local-roles-key = _local_roles

[mimetype]
blueprint = collective.jsonmigrator.mimetype

[owner]
blueprint = collective.jsonmigrator.owner
owner-key = _owner
path-key = _path

[logger]
blueprint = ftw.blueprints.logger
print_out = python: '%s passed (_workflow_state:%s).' % (item.get('_path', ''), item.get('_review_state', ''))

[interfacesupdater]
blueprint = ftw.inflator.creation.interfacesupdater
interfaces-key = _interfaces

[annotations-updater]
blueprint = ftw.inflator.creation.annotationsupdater

[propertiesupdater]
blueprint = collective.jsonmigrator.properties
path-key = _path
properties-key = _properties

[positionupdater]
blueprint = collective.jsonmigrator.order

[reindexobject]
blueprint = plone.app.transmogrifier.reindexobject

[savepoint]
blueprint = collective.transmogrifier.sections.savepoint
every = 100